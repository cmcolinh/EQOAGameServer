using Xunit;
using System.Collections.Generic;
using ReturnHome.Packet;
using ReturnHome.Packet.Bundle.Message.Types;

namespace ReturnHome.Tests.Packet.Bundle.Message {
    public class CompressedUpdateMessageTest {
        [Fact]
        public void Channel0x11Message1() { //From Matt's PCAP #287
            List<byte> bytes = new List<byte>{
                0x40, 0x01, 0xd3, 0x97, 0x0f, 0x41, 0x82, 0x31, 0x7c, 0xf2, 0x61, 0x1b, 0x10, 0x1e, 0xb0, 0x1c,
                0xc5, 0x6a, 0x01, 0xff, 0xc6, 0x98, 0xd8, 0x70, 0x26, 0x80, 0x3f, 0x84, 0x13, 0xff, 0xff, 0xff,
                0xff, 0x44, 0x3f, 0x19, 0x88, 0xf4, 0x44, 0x77, 0xf9, 0x3c, 0x34, 0x1c, 0x05, 0x96, 0x01, 0x06,
                0x06, 0x06, 0x06, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0x41,
                0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff,
                0xff, 0xff, 0xff, 0x61, 0x03, 0x01, 0x02, 0xff, 0x0f, 0x01, 0x8d, 0x03, 0x47, 0x75, 0x61, 0x72,
                0x64, 0x20, 0x53, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x1b, 0x23, 0x27, 0x75, 0x18, 0x13, 0x15,
                0x12, 0x01, 0x41, 0x74, 0x73, 0x72, 0x71, 0x00
            };

            PacketBytes packetBytes = PacketBytes.Of(bytes);
            CompressedUpdateMessage compressedUpdateMessage = CompressedUpdateMessage.Read(packetBytes);
            Assert.Equal(PacketBytes.Of(bytes), compressedUpdateMessage.Serialize());
        }

        [Fact]
        public void Channel0x11Message1Decompression() { //From Matt's PCAP #287
            List<byte> bytes = new List<byte>{
                0x40, 0x01, 0xd3, 0x97, 0x0f, 0x41, 0x82, 0x31, 0x7c, 0xf2, 0x61, 0x1b, 0x10, 0x1e, 0xb0, 0x1c,
                0xc5, 0x6a, 0x01, 0xff, 0xc6, 0x98, 0xd8, 0x70, 0x26, 0x80, 0x3f, 0x84, 0x13, 0xff, 0xff, 0xff,
                0xff, 0x44, 0x3f, 0x19, 0x88, 0xf4, 0x44, 0x77, 0xf9, 0x3c, 0x34, 0x1c, 0x05, 0x96, 0x01, 0x06,
                0x06, 0x06, 0x06, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0x41,
                0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff,
                0xff, 0xff, 0xff, 0x61, 0x03, 0x01, 0x02, 0xff, 0x0f, 0x01, 0x8d, 0x03, 0x47, 0x75, 0x61, 0x72,
                0x64, 0x20, 0x53, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x1b, 0x23, 0x27, 0x75, 0x18, 0x13, 0x15,
                0x12, 0x01, 0x41, 0x74, 0x73, 0x72, 0x71, 0x00
            };

            PacketBytes expectedDecompressedBytes = PacketBytes.Of(new List<byte> {
                0x01, 0xd3, 0x97, 0x0f, 0x00, 0x82, 0x31, 0x7c, 0xf2, 0x00, 0x1b, 0x10, 0x1e, 0xb0, 0x1c, 0xc5,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc6, 0x98, 0xd8, 0x70,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
                0x00, 0x00, 0x00, 0x3f, 0x19, 0x88, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x77, 0xf9, 0x3c, 0x34, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x06, 0x06,
                0x06, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
                0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff,
                0xff, 0x00, 0x03, 0x01, 0x02, 0xff, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x47, 0x75, 0x61, 0x72, 0x64,
                0x20, 0x53, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x18, 0x00, 0x00, 0x00,
                0x15, 0x00, 0x00, 0x01, 0x00, 0x74, 0x73, 0x72, 0x71
            });

            CompressedUpdateMessage compressedUpdateMessage = CompressedUpdateMessage.Read(PacketBytes.Of(bytes));
            PacketBytes actualDecompressedBytes = compressedUpdateMessage.Decompress();
            Assert.Equal(expectedDecompressedBytes, actualDecompressedBytes);
        }
    }
}
