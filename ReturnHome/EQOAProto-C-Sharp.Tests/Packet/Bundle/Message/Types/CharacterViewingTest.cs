using Xunit;
using System.Collections.Generic;
using EQOAProto_C_Sharp.Repository;
using Packet;
using Packet.Support;
using Packet.Bundle.Message;
using Packet.Bundle.Message.Types;

namespace EQOAProto_C_Sharp.UnitTests.Packet.Bundle.Message.Types {
    public class CharacterViewingTest {

        [Fact]
        public void TestBuildCharacterViewing() {
            PacketBytes expectedBytes = ExpectedOpcode().Append(ExpectedBytes());
            CharacterRepository characterRepository = new MockCharacterRepository();
            List<CharacterRepository.ViewingModel> characterList = characterRepository.ViewingModelFor(userName: "userName");
            CharacterViewing characterViewing = CharacterViewing.Of(characterList);
            OpcodeAndMessage opcodeAndMessage = characterViewing.ToOpcodeAndMessage();
            PacketBytes actualBytes = opcodeAndMessage.Serialize();
            Assert.Equal(expectedBytes, actualBytes);
        }

        static PacketBytes ExpectedBytes() => PacketBytes.Of(new List<byte>{ //From Matt's PCAP #169
            0x10, 0x05, 0x00, 0x00, 0x00, 0x46, 0x65, 0x72, 0x72, 0x79, 0x90, 0xa0, 0x8b, 0x01, 0xbe, 0xfb,
            0xd1, 0x9c, 0x0c, 0x10, 0x0c, 0x78, 0x00, 0x00, 0x04, 0x06, 0x00, 0x00, 0x00, 0x00, 0x85, 0x6c,
            0x40, 0xd8, 0xcb, 0x7d, 0x7e, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x03,
            0x03, 0x03, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x80, 0x00, 0xff, 0xf0, 0xf0, 0x00, 0xff, 0x00, 0x80, 0x00,
            0xff, 0x08, 0x00, 0x00, 0x00, 0x44, 0x61, 0x79, 0x64, 0x72, 0x69, 0x66, 0x74, 0xc6, 0xbb, 0x8b,
            0x01, 0x8f, 0xc0, 0xd4, 0xf2, 0x04, 0x18, 0x02, 0x78, 0x00, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00,
            0x00, 0xa9, 0xbe, 0x7d, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x29, 0x60, 0xc5, 0x2e, 0x03, 0x00, 0x00,
            0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0x20, 0x39, 0x64, 0xff, 0x80, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x3f, 0x76, 0x94, 0xff, 0x80, 0x00, 0x80, 0xff, 0x75, 0x00, 0x75, 0xff, 0x44, 0x44, 0x88, 0xff,
            0xff, 0x00, 0x00, 0xff, 0x04, 0x00, 0x00, 0x00, 0x4c, 0x65, 0x61, 0x72, 0xfa, 0xd5, 0x8b, 0x01,
            0x8f, 0xc0, 0xd4, 0xf2, 0x04, 0x0e, 0x02, 0x78, 0x02, 0x06, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x85, 0x6c, 0x40, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x73, 0xe8, 0xa6, 0x0a, 0x03, 0x00, 0x00, 0x02,
            0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0x50, 0x64, 0x00, 0xff, 0x00, 0x40, 0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
            0x40, 0x40, 0xff, 0x00, 0x40, 0x40, 0xff, 0x00, 0x40, 0x40, 0xff, 0x50, 0x64, 0x00, 0xff, 0x00,
            0x80, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x4b, 0x65, 0x6e, 0x63, 0x61, 0x64, 0x65, 0xc4, 0x89,
            0x8d, 0x01, 0x8f, 0xc0, 0xd4, 0xf2, 0x04, 0x12, 0x02, 0x78, 0x00, 0x06, 0x06, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x85, 0x6c, 0x40, 0xd8, 0xa8, 0xe4, 0x2c, 0x99, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
            0x00, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1b, 0xed, 0x59, 0xff, 0xff, 0xff, 0xff,
            0xff, 0x79, 0x79, 0xbd, 0xff, 0x2d, 0x84, 0x3c, 0xff, 0x79, 0x79, 0xbd, 0xff, 0x9e, 0x9c, 0x38,
            0xff, 0x00, 0x80, 0x00, 0xff, 0x0b, 0x00, 0x00, 0x00, 0x48, 0x79, 0x6d, 0x6e, 0x6f, 0x66, 0x70,
            0x6f, 0x77, 0x65, 0x72, 0xf2, 0x81, 0x93, 0x01, 0x8f, 0xc0, 0xd4, 0xf2, 0x04, 0x0a, 0x02, 0x78,
            0x00, 0x06, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x87, 0xf9, 0x17, 0x1a, 0x99, 0xdd, 0xf4,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x03, 0x00, 0x02,
            0x03, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
            0xff, 0xd6, 0xff, 0x00, 0x9f, 0x9f, 0xff, 0x00, 0x41, 0x82, 0xff, 0x00, 0x9f, 0x9f, 0xff, 0x00,
            0x80, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x15, 0x00, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x4e,
            0x65, 0x63, 0x6e, 0x6f, 0x6b, 0xac, 0xc3, 0x94, 0x01, 0xd5, 0xd3, 0x9c, 0xe6, 0x0a, 0x16, 0x06,
            0x78, 0x06, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xbe, 0x7d, 0x7c, 0x7c, 0x8b, 0x08,
            0x0c, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x96, 0x00, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xff, 0x96, 0x00, 0x3c, 0xff, 0x96, 0x00, 0x3c, 0xff,
            0x31, 0x62, 0x62, 0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00,
            0x44, 0x75, 0x64, 0x64, 0x65, 0x72, 0x7a, 0xf6, 0xc3, 0x95, 0x01, 0xe4, 0x94, 0xfd, 0xc6, 0x09,
            0x00, 0x0a, 0x78, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x22, 0xb7, 0x6e, 0x0b,
            0x87, 0xf9, 0x17, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0x62, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0x80, 0xff, 0xa0, 0xaa,
            0xb4, 0xff, 0x40, 0x00, 0x80, 0xff, 0x40, 0x00, 0x80, 0xff, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x00,
            0x00, 0x00, 0x43, 0x6f, 0x72, 0x73, 0x74, 0x65, 0x6e, 0x73, 0x62, 0x61, 0x6e, 0x6b, 0xba, 0xef,
            0x99, 0x01, 0x8c, 0xe3, 0xc4, 0x8d, 0x0e, 0x14, 0x00, 0x02, 0x02, 0x04, 0x04, 0x04, 0xff, 0xff,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff
        });

        static PacketBytes ExpectedOpcode() => PacketBytes.Of(new List<byte> {0x2c, 0x00});
    }
}
