using Xunit;
using System.Collections.Generic;
using Packet;
using Packet.Bundle.Message.Types;

namespace EQOAProto_C_Sharp.UnitTests.Packet.Bundle.Message.Types {
    public class CompressedUpdateMessageTest {
        [Fact]
        public void CanCreateObjectUpdateFromKnownValidBytes() {
            // From Matt's PCAP #287
            // see CompressedUpdateMessageTest.cs for details on the decompression that yielded these bytes
            List<byte> bytes = new List<byte> {
                0x01, 0xd3, 0x97, 0x0f, 0x00, 0x82, 0x31, 0x7c, 0xf2, 0x00, 0x1b, 0x10, 0x1e, 0xb0, 0x1c, 0xc5,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc6, 0x98, 0xd8, 0x70,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
                0x00, 0x00, 0x00, 0x3f, 0x19, 0x88, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x77, 0xf9, 0x3c, 0x34, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x06, 0x06,
                0x06, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
                0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff,
                0xff, 0x00, 0x03, 0x01, 0x02, 0xff, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x47, 0x75, 0x61, 0x72, 0x64,
                0x20, 0x53, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x18, 0x00, 0x00, 0x00,
                0x15, 0x00, 0x00, 0x01, 0x00, 0x74, 0x73, 0x72, 0x71
            };

            PacketBytes decompressedBytes = PacketBytes.Of(bytes);
            ObjectUpdate objectUpdate = ObjectUpdate.Read(decompressedBytes);
            PacketBytes actualBytes = objectUpdate.Serialize();
            PacketBytes expectedBytes = PacketBytes.Of(bytes);
            Assert.Equal(expectedBytes, actualBytes);
        }

        [Fact]
        public void CanCompressObjectUpdateFromKnownValidBytes() {
            // From Matt's PCAP #287
            // see CompressedUpdateMessageTest.cs for details on the decompression that yielded these bytes
            List<byte> bytes = new List<byte> {
                0x01, 0xd3, 0x97, 0x0f, 0x00, 0x82, 0x31, 0x7c, 0xf2, 0x00, 0x1b, 0x10, 0x1e, 0xb0, 0x1c, 0xc5,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc6, 0x98, 0xd8, 0x70,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
                0x00, 0x00, 0x00, 0x3f, 0x19, 0x88, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x77, 0xf9, 0x3c, 0x34, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x06, 0x06,
                0x06, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
                0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff,
                0xff, 0x00, 0x03, 0x01, 0x02, 0xff, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x47, 0x75, 0x61, 0x72, 0x64,
                0x20, 0x53, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x18, 0x00, 0x00, 0x00,
                0x15, 0x00, 0x00, 0x01, 0x00, 0x74, 0x73, 0x72, 0x71
            };

            List<byte> expectedCompressionBytes = new List<byte>{
                0x40, 0x01, 0xd3, 0x97, 0x0f, 0x41, 0x82, 0x31, 0x7c, 0xf2, 0x61, 0x1b, 0x10, 0x1e, 0xb0, 0x1c,
                0xc5, 0x6a, 0x01, 0xff, 0xc6, 0x98, 0xd8, 0x70, 0x26, 0x80, 0x3f, 0x84, 0x13, 0xff, 0xff, 0xff,
                0xff, 0x44, 0x3f, 0x19, 0x88, 0xf4, 0x44, 0x77, 0xf9, 0x3c, 0x34, 0x1c, 0x05, 0x96, 0x01, 0x06,
                0x06, 0x06, 0x06, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0x41,
                0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff, 0xff, 0xff, 0xff, 0x41, 0xff,
                0xff, 0xff, 0xff, 0x61, 0x03, 0x01, 0x02, 0xff, 0x0f, 0x01, 0x8d, 0x03, 0x47, 0x75, 0x61, 0x72,
                0x64, 0x20, 0x53, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x1b, 0x23, 0x27, 0x75, 0x18, 0x13, 0x15,
                0x12, 0x01, 0x41, 0x74, 0x73, 0x72, 0x71, 0x00
            };

            PacketBytes decompressedBytes = PacketBytes.Of(bytes);
            ObjectUpdate objectUpdate = ObjectUpdate.Read(decompressedBytes);
            PacketBytes actualBytes = objectUpdate.CompressThisMessage().Serialize();
            PacketBytes expectedBytes = PacketBytes.Of(expectedCompressionBytes);
            Assert.Equal(expectedBytes, actualBytes);
        }

        [Fact]
        public void CanXorAndCompressWithAnotherMessage() {
            // From Matt's PCAP #287
            // see CompressedUpdateMessageTest.cs for details on the decompression that yielded these bytes
            List<byte> bytes = new List<byte> {
                0x01, 0xd3, 0x97, 0x0f, 0x00, 0x82, 0x31, 0x7c, 0xf2, 0x00, 0x1b, 0x10, 0x1e, 0xb0, 0x1c, 0xc5,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc6, 0x98, 0xd8, 0x70,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
                0x00, 0x00, 0x00, 0x3f, 0x19, 0x88, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x77, 0xf9, 0x3c, 0x34, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x06, 0x06,
                0x06, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
                0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff,
                0xff, 0x00, 0x03, 0x01, 0x02, 0xff, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x47, 0x75, 0x61, 0x72, 0x64,
                0x20, 0x53, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x18, 0x00, 0x00, 0x00,
                0x15, 0x00, 0x00, 0x01, 0x00, 0x74, 0x73, 0x72, 0x71
            };

            List<byte> secondSet = new List<byte> {
                0x01, 0x6e, 0x28, 0x11, 0x00, 0x82, 0x31, 0x57, 0x98, 0x00, 0x1b, 0x10, 0x1e, 0xbb, 0x21, 0x71,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x71, 0xad, 0x23, 0x80,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
                0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff,
                0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x42, 0x6f, 0x6c, 0x61, 0x73,
                0x68, 0x20, 0x42, 0x61, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x10, 0xb7, 0x7e, 0x00, 0x00, 0x00,
                0x15, 0x00, 0x00, 0x01, 0x00, 0x74, 0x73, 0x72, 0x71
            };

            List<byte> expectedXorBytes = new List<byte> {
                0x00, 0xbd, 0xbf, 0x1e, 0x00, 0x00, 0x00, 0x2b, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x3d, 0xb4,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xb7, 0x35, 0xfb, 0xf0,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x3f, 0x19, 0x88, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x77, 0xf9, 0x3c, 0x34, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x06, 0x06,
                0x06, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x03, 0x01, 0x02, 0x00, 0xf0, 0xfe, 0xff, 0xff, 0x00, 0x05, 0x1a, 0x0d, 0x13, 0x17,
                0x48, 0x73, 0x27, 0x13, 0x11, 0x1d, 0x64, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x10, 0xc2, 0x66, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };

            PacketBytes expectedXor = PacketBytes.Of(expectedXorBytes);
            ObjectUpdate firstObject = ObjectUpdate.Read(PacketBytes.Of(bytes));
            ObjectUpdate secondObject = ObjectUpdate.Read(PacketBytes.Of(secondSet));
            PacketBytes actualXor = secondObject.CompressThisMessage(with: firstObject).Decompress();
            Assert.Equal(expectedXor, actualXor);
        }
    }
}
