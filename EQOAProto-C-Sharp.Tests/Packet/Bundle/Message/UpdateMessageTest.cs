using Xunit;
using System.Collections.Generic;
using Packet;
using Packet.Bundle;
using Packet.Bundle.Message;
using Packet.Bundle.Message.Types;

namespace EQOAProto_C_Sharp.UnitTests.Packet.Bundle {
    public class UpdateMessageTest {
        [Fact]
        public void TestUpdateMessageCreation() {
            ushort channel11LastConfirmedMessage = 1;
            List<ObjectUpdate> channel11 = new List<ObjectUpdate>();
            ObjectUpdate message1 = ObjectUpdate.Read(PacketBytes.Of(new List<byte> {
                0x01, 0xd3, 0x97, 0x0f, 0x00, 0x82, 0x31, 0x7c, 0xf2, 0x00, 0x1b, 0x10, 0x1e, 0xb0, 0x1c, 0xc5,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc6, 0x98, 0xd8, 0x70,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
                0x00, 0x00, 0x00, 0x3f, 0x19, 0x88, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x77, 0xf9, 0x3c, 0x34, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x06, 0x06,
                0x06, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
                0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff,
                0xff, 0x00, 0x03, 0x01, 0x02, 0xff, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x47, 0x75, 0x61, 0x72, 0x64,
                0x20, 0x53, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x18, 0x00, 0x00, 0x00,
                0x15, 0x00, 0x00, 0x01, 0x00, 0x74, 0x73, 0x72, 0x71
            }));
            channel11.Add(message1);
            ObjectUpdate queuedMessage = ObjectUpdate.Read(PacketBytes.Of(new List<byte> {
                0x01, 0x6e, 0x28, 0x11, 0x00, 0x82, 0x31, 0x57, 0x98, 0x00, 0x1b, 0x10, 0x1e, 0xbb, 0x21, 0x71,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x71, 0xad, 0x23, 0x80,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
                0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff,
                0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x42, 0x6f, 0x6c, 0x61, 0x73,
                0x68, 0x20, 0x42, 0x61, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x10, 0xb7, 0x7e, 0x00, 0x00, 0x00,
                0x15, 0x00, 0x00, 0x01, 0x00, 0x74, 0x73, 0x72, 0x71
            }));
            MessageContents expectedMessage = UpdateMessage.Read(PacketBytes.Of(new List<byte>{
                0xc9, 0x02, 0x00, 0x01, 0x31, 0xbd, 0xbf, 0x1e, 0x23, 0x2b, 0x6a, 0x34, 0x0b, 0x3d, 0xb4, 0x1a,
                0x01, 0x41, 0xb7, 0x35, 0xfb, 0xf0, 0x16, 0x80, 0x81, 0x13, 0x04, 0x48, 0x3f, 0x19, 0x88, 0xf4,
                0x44, 0x77, 0xf9, 0x3c, 0x34, 0x1c, 0x05, 0x61, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x83, 0x2f,
                0x03, 0x01, 0x02, 0x41, 0xf0, 0xfe, 0xff, 0xff, 0x8d, 0x01, 0x05, 0x1a, 0x0d, 0x13, 0x17, 0x48,
                0x73, 0x27, 0x13, 0x11, 0x1d, 0x64, 0x61, 0x1b, 0x22, 0x13, 0x06, 0x41, 0x80, 0x10, 0xc2, 0x66,
                0x0c, 0x00
            }));

            UpdateMessage updateMessage = UpdateMessage.Of(
                messageLength: (ushort)(queuedMessage.Serialize().Count), //should always be 0xc9......
                messageNumber: (ushort)(channel11LastConfirmedMessage + channel11.Count),
                xorDelta: channel11LastConfirmedMessage == 0 ? (byte)0 : (byte)channel11.Count,
                compressedUpdateMessage: queuedMessage.CompressThisMessage(with: channel11[0])
            );

            Assert.Equal(expectedMessage.Serialize(), updateMessage.Serialize());
        }

        [Fact]
        public void TestCreationOfBundleMessage() {
            UpdateMessage updateMessage = (UpdateMessage)UpdateMessage.Read(PacketBytes.Of(new List<byte>{
                0xc9, 0x02, 0x00, 0x01, 0x31, 0xbd, 0xbf, 0x1e, 0x23, 0x2b, 0x6a, 0x34, 0x0b, 0x3d, 0xb4, 0x1a,
                0x01, 0x41, 0xb7, 0x35, 0xfb, 0xf0, 0x16, 0x80, 0x81, 0x13, 0x04, 0x48, 0x3f, 0x19, 0x88, 0xf4,
                0x44, 0x77, 0xf9, 0x3c, 0x34, 0x1c, 0x05, 0x61, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x83, 0x2f,
                0x03, 0x01, 0x02, 0x41, 0xf0, 0xfe, 0xff, 0xff, 0x8d, 0x01, 0x05, 0x1a, 0x0d, 0x13, 0x17, 0x48,
                0x73, 0x27, 0x13, 0x11, 0x1d, 0x64, 0x61, 0x1b, 0x22, 0x13, 0x06, 0x41, 0x80, 0x10, 0xc2, 0x66,
                0x0c, 0x00
            }));
            //note the channel number 0x11 added to the front of the byte stream
            BundleMessage expectedBundleMessage = BundleMessage.Read(PacketBytes.Of(new List<byte>{
                0x11, 0xc9, 0x02, 0x00, 0x01, 0x31, 0xbd, 0xbf, 0x1e, 0x23, 0x2b, 0x6a, 0x34, 0x0b, 0x3d, 0xb4,
                0x1a, 0x01, 0x41, 0xb7, 0x35, 0xfb, 0xf0, 0x16, 0x80, 0x81, 0x13, 0x04, 0x48, 0x3f, 0x19, 0x88,
                0xf4, 0x44, 0x77, 0xf9, 0x3c, 0x34, 0x1c, 0x05, 0x61, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x83,
                0x2f, 0x03, 0x01, 0x02, 0x41, 0xf0, 0xfe, 0xff, 0xff, 0x8d, 0x01, 0x05, 0x1a, 0x0d, 0x13, 0x17,
                0x48, 0x73, 0x27, 0x13, 0x11, 0x1d, 0x64, 0x61, 0x1b, 0x22, 0x13, 0x06, 0x41, 0x80, 0x10, 0xc2,
                0x66, 0x0c, 0x00
            }));
            PacketBytes expectedPacketBytes = expectedBundleMessage.Serialize();
            BundleMessage actualMessageContents = updateMessage.ToBundleMessage(messageChannel: 0x11);
            PacketBytes actualPacketBytes = actualMessageContents.Serialize();
            Assert.Equal(expectedPacketBytes, actualPacketBytes);
        }
    }
}
